---
# The services that make up the application
services:
  # The es01 service represents an Elasticsearch node in the cluster
  es01:
    # The Docker image to use for this service
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    # The volumes to mount into this service
    volumes:
      - ./data/certs:/usr/share/elasticsearch/config/certs
      - ./data/esdata01:/usr/share/elasticsearch/data
    # The ports to expose from this service
    ports:
      - ${ES_PORT}:9200
    # The environment variables to set inside the container
    environment:
      - node.name=es01
      - cluster.name=${CLUSTER_NAME}
      - discovery.type=single-node
      # - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms4g -Xmx4g"
      # - xpack.security.enabled=true
      # - xpack.security.http.ssl.enabled=true
      # - xpack.security.http.ssl.key=certs/es01/es01.key
      # - xpack.security.http.ssl.certificate=certs/es01/es01.crt
      # - xpack.security.http.ssl.certificate_authorities=certs/ca/ca.crt
      # - xpack.security.http.ssl.verification_mode=certificate
      # - xpack.security.transport.ssl.enabled=false
      # - xpack.security.transport.ssl.key=certs/es01/es01.key
      # - xpack.security.transport.ssl.certificate=certs/es01/es01.crt
      # - xpack.security.transport.ssl.certificate_authorities=certs/ca/ca.crt
      # - xpack.security.transport.ssl.verification_mode=certificate
      # - xpack.license.self_generated.type=${LICENSE}
    # The memory limit for this service
    mem_limit: ${MEM_LIMIT}
    # The ulimits to set for this service
    ulimits:
      memlock:
        soft: -1
        hard: -1
    # The healthcheck to determine the health of this service
    healthcheck:
      test: [
          "CMD-SHELL",
          # "curl -s --cacert config/certs/ca/ca.crt https://localhost:9200 | grep -q 'missing authentication credentials'",
          "curl -s http://localhost:9200 | grep -q 'missing authentication credentials'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120
    networks:
      - aem-efk-stack

  # The kibana service represents a Kibana instance
  kibana:
    # This service depends on the es01 service
    depends_on:
      es01:
        condition: service_healthy
    # The Docker image to use for this service
    image: docker.elastic.co/kibana/kibana:${STACK_VERSION}
    # The volumes to mount into this service
    volumes:
      - ./data/certs:/usr/share/kibana/config/certs
      - ./data/kibana:/usr/share/kibana/data
    # The ports to expose from this service
    ports:
      - ${KIBANA_PORT}:5601
    # The environment variables to set inside the container
    environment:
      - SERVERNAME=kibana
      - ELASTICSEARCH_HOSTS=http://es01:9200
      # - ELASTICSEARCH_USERNAME=kibana_system
      # - ELASTICSEARCH_PASSWORD=${KIBANA_PASSWORD}
      # - ELASTICSEARCH_SSL_CERTIFICATEAUTHORITIES=config/certs/ca/ca.crt
      # - xpack.security.audit.enabled=true
      # - XPACK_ENCRYPTEDSAVEDOBJECTS_ENCRYPTIONKEY=XYVgaJBfdrxCNoATOIluQisRnzGDeUwy
    # The memory limit for this service
    mem_limit: ${MEM_LIMIT}
    # The healthcheck to determine the health of this service
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s -I http://localhost:5601 | grep -q 'HTTP/1.1 302 Found'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120
    networks:
      - aem-efk-stack

  fluent-bit:
    image: fluent/fluent-bit:3.1.10
    container_name: fluent-bit
    user: 1000:1000
    depends_on:
      es01:
        condition: service_healthy
    volumes:
      - ./fluent-bit/conf:/fluent-bit/etc
      - ./logs:/logs
    environment:
      - ELASTICSEARCH_HOSTS=es01
      - ELASTICSEARCH_USERNAME=elastic
      # - ELASTICSEARCH_PASSWORD=${ELASTIC_PASSWORD}
      - ELASTICSEARCH_PASSWORD=
      - ES_PORT=${ES_PORT}
    links:
      - "es01"
    ports:
      - "24224:24224"
      - "24224:24224/udp"
    networks:
      - aem-efk-stack
# The volumes to create for the application
# volumes:
#   certs:
#     driver: local
networks:
  aem-efk-stack:
    driver: bridge
